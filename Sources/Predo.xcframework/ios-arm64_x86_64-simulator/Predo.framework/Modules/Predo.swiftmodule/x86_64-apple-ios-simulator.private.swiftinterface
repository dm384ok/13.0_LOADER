// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -module-name Predo
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AdSupport
import AppTrackingTransparency
import AppsFlyerLib
import CoreAudioTypes
import CoreTelephony
import FBSDKCoreKit
import FlagsmithClient
import Foundation
import OneSignalFramework
import OneSignalNotifications
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import _AVKit_SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension Predo.Disk {
  public enum ErrorCode : Swift.Int {
    case noFileFound
    case serialization
    case deserialization
    case invalidFileName
    case couldNotAccessTemporaryDirectory
    case couldNotAccessUserDomainMask
    case couldNotAccessSharedContainer
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public static let errorDomain: Swift.String
}
extension Predo.Disk {
  public static func save<T>(_ value: T, to directory: Predo.Disk.Directory, as path: Swift.String, encoder: Foundation.JSONEncoder = JSONEncoder()) throws where T : Swift.Encodable
  public static func append<T>(_ value: T, to path: Swift.String, in directory: Predo.Disk.Directory, decoder: Foundation.JSONDecoder = JSONDecoder(), encoder: Foundation.JSONEncoder = JSONEncoder()) throws where T : Swift.Decodable, T : Swift.Encodable
  public static func append<T>(_ value: [T], to path: Swift.String, in directory: Predo.Disk.Directory, decoder: Foundation.JSONDecoder = JSONDecoder(), encoder: Foundation.JSONEncoder = JSONEncoder()) throws where T : Swift.Decodable, T : Swift.Encodable
  public static func retrieve<T>(_ path: Swift.String, from directory: Predo.Disk.Directory, as type: T.Type, decoder: Foundation.JSONDecoder = JSONDecoder()) throws -> T where T : Swift.Decodable
}
@_hasMissingDesignatedInitializers public class Disk {
  public enum Directory : Swift.Equatable {
    case documents
    case caches
    case applicationSupport
    case temporary
    case sharedContainer(appGroupName: Swift.String)
    public var pathDescription: Swift.String {
      get
    }
    public static func == (lhs: Predo.Disk.Directory, rhs: Predo.Disk.Directory) -> Swift.Bool
  }
  @objc deinit
}
extension Predo.Disk {
  public static func save(_ value: [UIKit.UIImage], to directory: Predo.Disk.Directory, as path: Swift.String) throws
  public static func append(_ value: UIKit.UIImage, to path: Swift.String, in directory: Predo.Disk.Directory) throws
  public static func append(_ value: [UIKit.UIImage], to path: Swift.String, in directory: Predo.Disk.Directory) throws
  public static func retrieve(_ path: Swift.String, from directory: Predo.Disk.Directory, as type: [UIKit.UIImage].Type) throws -> [UIKit.UIImage]
}
@_inheritsConvenienceInitializers @objc(Predome) final public class Predome : ObjectiveC.NSObject {
  @objc final public var customKeys: [Swift.String : Swift.String]
  @objc public static func startik()
  final public func vkluchit()
  @objc override dynamic public init()
  @objc deinit
}
extension Predo.Disk {
  public static func save(_ value: Foundation.Data, to directory: Predo.Disk.Directory, as path: Swift.String) throws
  public static func retrieve(_ path: Swift.String, from directory: Predo.Disk.Directory, as type: Foundation.Data.Type) throws -> Foundation.Data
}
extension Predo.Disk {
  @available(*, deprecated, message: "Use Disk.url(for:in:) instead, it does not throw an error if the file does not exist.")
  public static func getURL(for path: Swift.String?, in directory: Predo.Disk.Directory) throws -> Foundation.URL
  public static func url(for path: Swift.String?, in directory: Predo.Disk.Directory) throws -> Foundation.URL
  public static func clear(_ directory: Predo.Disk.Directory) throws
  public static func remove(_ path: Swift.String, from directory: Predo.Disk.Directory) throws
  public static func remove(_ url: Foundation.URL) throws
  public static func exists(_ path: Swift.String, in directory: Predo.Disk.Directory) -> Swift.Bool
  public static func exists(_ url: Foundation.URL) -> Swift.Bool
  public static func doNotBackup(_ path: Swift.String, in directory: Predo.Disk.Directory) throws
  public static func doNotBackup(_ url: Foundation.URL) throws
  public static func backup(_ path: Swift.String, in directory: Predo.Disk.Directory) throws
  public static func backup(_ url: Foundation.URL) throws
  public static func move(_ path: Swift.String, in directory: Predo.Disk.Directory, to newDirectory: Predo.Disk.Directory) throws
  public static func move(_ originalURL: Foundation.URL, to newURL: Foundation.URL) throws
  public static func rename(_ path: Swift.String, in directory: Predo.Disk.Directory, to newPath: Swift.String) throws
  public static func isFolder(_ url: Foundation.URL) -> Swift.Bool
}
extension Predo.Disk {
  public static func save(_ value: UIKit.UIImage, to directory: Predo.Disk.Directory, as path: Swift.String) throws
  public static func retrieve(_ path: Swift.String, from directory: Predo.Disk.Directory, as type: UIKit.UIImage.Type) throws -> UIKit.UIImage
}
@available(iOS 11.0, *)
extension Predo.Disk {
  public static var totalCapacity: Swift.Int? {
    get
  }
  public static var availableCapacity: Swift.Int? {
    get
  }
  public static var availableCapacityForImportantUsage: Swift.Int? {
    get
  }
  public static var availableCapacityForOpportunisticUsage: Swift.Int? {
    get
  }
}
extension Predo.Disk {
  public static func save(_ value: [Foundation.Data], to directory: Predo.Disk.Directory, as path: Swift.String) throws
  public static func append(_ value: Foundation.Data, to path: Swift.String, in directory: Predo.Disk.Directory) throws
  public static func append(_ value: [Foundation.Data], to path: Swift.String, in directory: Predo.Disk.Directory) throws
  public static func retrieve(_ path: Swift.String, from directory: Predo.Disk.Directory, as type: [Foundation.Data].Type) throws -> [Foundation.Data]
}
extension Predo.Disk.ErrorCode : Swift.Equatable {}
extension Predo.Disk.ErrorCode : Swift.Hashable {}
extension Predo.Disk.ErrorCode : Swift.RawRepresentable {}
